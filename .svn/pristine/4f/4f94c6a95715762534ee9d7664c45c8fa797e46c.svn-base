<?php if ( ! defined('BASEPATH')) exit('No direct script access allowed');

class MaintenanceUpdate {
    function __construct() {
        $ci = get_instance();
        $this->db = $ci->db;
        $this->ref = $ci->ref;

    }

    function do_fix(){
        $update_methods = get_class_methods($this);

        foreach ($update_methods AS $method){
            $check = new ReflectionMethod($this, $method);

            if($check->isPublic()){
            } elseif($check->isPrivate()){
                $this->$method();
            } else{
            }
        }

    }

    private  function change_opening_type(){
        $this->db->where('type',ST_SALESINVOICE)->update('opening_sale',array('type'=>ST_OPENING_CUSTOMER));
        $this->db->where('type',ST_SUPPINVOICE)->update('opening_sale',array('type'=>ST_OPENING_SUPPLIER));
    }
    private function supplier_ob(){
        $ov_amount = "(ob.debit-ob.credit)";
        $this->db->where(array('ob.type'=>ST_OPENING_SUPPLIER));
        $this->db->join('supp_trans AS tran','tran.type=ob.type AND tran.trans_no = ob.trans_no','LEFT');
        $this->db->select("ob.type, ob.trans_no, tran.ov_amount, $ov_amount AS ob_amount");
        $this->db->where("tran.ov_amount <> $ov_amount");
        $result = $this->db->get('opening_sale AS ob');

        if( is_object($result) && $result->num_rows > 0 ) foreach ($result->result() AS $ite){
//             die('check fix supplier ob');
            if( $ite->ov_amount = $ite->ob_amount * (-1) ){
                $this->db->where(array('trans_no'=>$ite->trans_no,'type'=>$ite->type))->update('supp_trans',array('ov_amount'=>$ite->ob_amount));
            }
        }

    }

    private function remove_supplier_opening_trans(){
        $supp_trans = $this->db->where('type',ST_OPENING_SUPPLIER)->get('supp_trans')->result();
        foreach ($supp_trans AS $tran){

            $ob_check = $this->db->where(array('type'=>$tran->type,'trans_no'=>$tran->trans_no))->get('opening_sale')->row();
            if( !isset($ob_check->id) ){
                $this->db->where(array('type'=>$tran->type,'trans_no'=>$tran->trans_no))->delete('supp_trans');
                $this->ci->db->where(array('type'=>$tran->type,'type_no'=>$tran->trans_no))->delete('gl_trans');
            }
        }

    }
/*
    private function dofixUnited15Service(){
        $saleTrans = $this->db->select('*')->where(array('tran_date >='=>'2015-04-01','tran_date <'=>'2015-12-31'))->get('debtor_trans')->result();
        if( count($saleTrans) > 0 ) foreach ($saleTrans AS $tran){
            $changeTax = array(
                'debtor_trans_no'=>$tran->trans_no,
                'debtor_trans_type'=>$tran->type,
                'tax_type_id'=>32
            );
            $this->db->where($changeTax)->update('debtor_trans_details',array('tax_type_id'=>28));
//             $this->db->where(array('debtor_trans_no'=>$tran->trans_no,'debtor_trans_type'=>$tran->type));
//             $this->db->where('tax_type_id'=>);
//             $detail_db = $this->db->get('debtor_trans_details');
//             bug($detail_db); die;
        }
    }


*/
    private function restore_gl_fix(){
        $items = $this->db->where_in('type',array(ST_SUPPAYMENT,ST_CUSTPAYMENT) )->get('data_incorrect');

        if( $items->num_rows > 0 ) foreach ($items->result() AS $ite){
            if( $ite->type==ST_SUPPAYMENT ){
                $tran = $this->db->where(array('type'=>$ite->type,'trans_no'=>$ite->trans_no))->get("supp_trans")->row();
            } elseif ($ite->type==ST_CUSTPAYMENT){
                $tran = $this->db->where(array('type'=>$ite->type,'trans_no'=>$ite->trans_no))->get("debtor_trans")->row();
            }

            if( is_object($tran) && trim($tran->reference) !="" ){
                $data = (array)json_decode($ite->data);
                if( count($data) > 1 ){
                    $this->db->insert($ite->table,$data);
                    $this->db->delete('data_incorrect', array('id' => $ite->id));
                }
            }

        }


    }
    public  function opening_gl_fix($type=null,$trans_no=0,$gl_counter=0){

        if( $type < 0 || $trans_no < 1 ) return false;

        if( !$this->db->table_exists('data_incorrect') ){
            $this->db->query("CREATE TABLE `data_incorrect` (
              `id` int(11) NOT NULL AUTO_INCREMENT,
              `table` char(50) NOT NULL,
              `type` int(5) NOT NULL,
              `trans_no` int(11) NOT NULL,
              `data` text,
              `created_date` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
              `comment` text,
              PRIMARY KEY (`id`)
            ) ENGINE=InnoDB AUTO_INCREMENT=8 DEFAULT CHARSET=latin1;");
        }

        switch ($type){
            case ST_CUSTPAYMENT:
                $tran = $this->db->where(array('type'=>$type,'trans_no'=>$trans_no))->get("debtor_trans")->row();
                break;
            case ST_SUPPAYMENT:
                $tran = $this->db->where(array('type'=>$type,'trans_no'=>$trans_no))->get("supp_trans")->row();
                break;
            default:
                $tran = null;

        }
        if( is_object($tran) )
            return false;


        $gl_tran = $this->db->where('counter',$gl_counter)->get("gl_trans")->row_array();
        $store = array(
            'data'=>json_encode($gl_tran),
            'table'=>'gl_trans',
            'type'=>$type,
            'trans_no'=>$trans_no
        );

        $this->db->insert('data_incorrect',$store);
        $this->db->delete('gl_trans', array('counter' => $gl_counter));
//         bug($gl_tran);bug($tran);die('removed');

        return true;

    }


    private function update_reference($type=ST_CUSTPAYMENT){
        $customer_payment = $this->db->where( array('type'=>$type,'reference'=>"") )->order_by('id ASC')->get('refs');

        if( $customer_payment->num_rows >0 ) foreach ($customer_payment->result() AS $ite){
            $next_ref = $this->ref->get_next($type);

            $this->db->where(array('trans_no'=>$ite->id,'type'=>$ite->type))->update('debtor_trans',array('reference'=>$next_ref));
            $this->db->where(array('id'=>$ite->id,'type'=>$ite->type))->update('refs',array('reference'=>$next_ref));
            $this->ref->save($ite->type,$ite->id,$next_ref);
        }

        $bank_trans = $this->db->where( array('type'=>$type,'ref'=>"") )->order_by('trans_no ASC')->get('bank_trans');
        if( $bank_trans->num_rows >0 ) foreach ($bank_trans->result() AS $ite){
            $ref = $this->ref->get($ite->type,$ite->trans_no);

            if( $ref ){
                $this->db->where(array('trans_no'=>$ite->trans_no,'type'=>$ite->type))->update('bank_trans',array('ref'=>$ref));
            }
//             bug($ite);
//             bug($ref);die;
        }


    }

}