<?php
if (! defined('BASEPATH'))
    exit('No direct script access allowed');

class SupplierReportAgedAnalysis extends ci
{

    function __construct()
    {
        $ci = get_instance();
        $this->input = $ci->input;
        $this->db = $ci->db;
        $this->analysis_model = module_model_load('analysis', 'supplier');
    }

    var $report_table = array(
        'type' => array(
            'Supplier',
            100,
            'left'
        ),
        'reference' => array(
            '',
            130,
            'left'
        ),
        'supp_reference' => array(
            '',
            190,
            'left'
        ),
        'tran_date' => array(
            'Current',
            250,
            'right'
        ),
        'x_rate' => array(
            '',
            320,
            'right'
        ),
        'debit' => array(
            '',
            385,
            'right'
        ),
        'credit' => array(
            '',
            450,
            'right'
        ),
        'debit_base' => array(
            'Total Balance',
            515,
            'right'
        )
    );

    function aged_analysis_print()
    {
        $to = input_val('PARAM_0');
        $supplier_id = input_val('PARAM_1');
        $currency = input_val('PARAM_2');
        $show_all = input_val('PARAM_3');
        $summaryOnly = input_val('PARAM_4');
        $no_zeros = input_val('PARAM_5');
        $graphics = input_val('PARAM_6');
        $comments = input_val('PARAM_7');
        $orientation = input_val('PARAM_8') ? 'L' : 'P';
        $destination = input_val('PARAM_9');
        $dec = user_price_dec();

        if ($destination)
            include_once (ROOT . "/reporting/includes/excel_report.inc");
        else
            include_once (ROOT . "/reporting/includes/pdf_report.inc");

        if ($graphics) {
            include_once (ROOT . "/reporting/includes/class.graphic.inc");
            $pg = new graph();
        }

        if ($supplier_id == ALL_TEXT)
            $from = _('All');
        else
            $from = get_supplier_name($supplier_id);



        if ($summaryOnly == 1)
            $summary = _('Summary Only');
        else
            $summary = _('Detailed Report');

        if ($currency == ALL_TEXT) {
            $convert = true;
            $currency = _('Balances in Home Currency');
        } else {
            $convert = false;
            $currency_taget = input_val('PARAM_2');
        }

        if ($no_zeros)
            $nozeros = _('Yes');
        else
            $nozeros = _('No');
        if ($show_all)
            $show = _('Yes');
        else
            $show = _('No');

        $PastDueDays1 = get_company_pref('past_due_days');
        $PastDueDays2 = 2 * $PastDueDays1;
        $nowdue = "1-" . $PastDueDays1 . " " . _('Days');
        $pastdue1 = $PastDueDays1 + 1 . "-" . $PastDueDays2 . " " . _('Days');
        $pastdue2 = _('Over') . " " . $PastDueDays2 . " " . _('Days');
//         $this->report_table['xxx'][0] = $nowdue;
//         $this->report_table['xxx'][0] = $pastdue1;
//         $this->report_table['xxx'][0] = $pastdue2;

        // $headers = array(_('Supplier'), '', '', _('Current'), $nowdue, $pastdue1,$pastdue2,
        // _('Total Balance'));

        // $aligns = array('left', 'left', 'left', 'right', 'right', 'right', 'right', 'right');

        $params = array(
            0 => $comments,
            1 => array(
                'text' => _('End Date'),
                'from' => $to,
                'to' => ''
            ),
            2 => array(
                'text' => _('Supplier'),
                'from' => $from,
                'to' => ''
            ),
            3 => array(
                'text' => _('Currency'),
                'from' => $currency,
                'to' => ''
            ),
            4 => array(
                'text' => _('Type'),
                'from' => $summary,
                'to' => ''
            ),
            5 => array(
                'text' => _('Show Also Allocated'),
                'from' => $show,
                'to' => ''
            ),
            6 => array(
                'text' => _('Suppress Zeros'),
                'from' => $nozeros,
                'to' => ''
            )
        );

        if ($convert)
            $headers[2] = _('currency');

        $rep = new FrontReport(_('Aged Supplier Analysis'), "AgedSupplierAnalysis", user_pagesize(), 9, $orientation);

        list ($headers, $cols, $aligns) = get_instance()->reporting->report_front_params($this->report_table);

        if ($orientation == 'L')
            recalculate_cols($cols);

        $rep->Font();
        $rep->Info($params, $cols, $headers, $aligns);
        $rep->NewPage();

        $total = array();
        $total[0] = $total[1] = $total[2] = $total[3] = $total[4] = 0.0;
        $PastDueDays1 = get_company_pref('past_due_days');
        $PastDueDays2 = 2 * $PastDueDays1;

        $nowdue = "1-" . $PastDueDays1 . " " . _('Days');
        $pastdue1 = $PastDueDays1 + 1 . "-" . $PastDueDays2 . " " . _('Days');
        $pastdue2 = _('Over') . " " . $PastDueDays2 . " " . _('Days');

        $this->db->from('suppliers')->select('supplier_id, supp_name AS name , curr_code');
        if ($supplier_id != ALL_TEXT) {
            $this->db->where('supplier_id', $supplier_id);
        }

        if ($currency != ALL_TEXT and ! empty($currency_taget)) {
            $this->db->where('curr_code', $currency_taget);
        }

        $result = $this->db->order_by('supp_name')
            ->get()
            ->result_array();

        foreach ($result as $myrow) {
//             if (! $convert && $currency_taget != $myrow['curr_code'])
//                 continue;

            $supprec = $this->analysis_model->get_supplier_details($myrow['supplier_id'], $to, $show_all);
            if (! $supprec)
                continue;

            $str = array(
                $supprec["Balance"] - $supprec["Due"],
                $supprec["Due"] - $supprec["Overdue1"],
                $supprec["Overdue1"] - $supprec["Overdue2"],
                $supprec["Overdue2"],
                $supprec["Balance"]
            );

            if ($no_zeros && floatcmp(array_sum($str), 0) == 0)
                continue;

            $rep->fontSize += 2;
            $rep->TextCol(0, 2, $myrow['name']);
            if ($convert)
                $rep->TextCol(2, 3, $myrow['curr_code']);
            $rep->fontSize -= 2;
            $total[0] += ($supprec["Balance"] - $supprec["Due"]);
            $total[1] += ($supprec["Due"] - $supprec["Overdue1"]);
            $total[2] += ($supprec["Overdue1"] - $supprec["Overdue2"]);
            $total[3] += $supprec["Overdue2"];
            $total[4] += $supprec["Balance"];

            for ($i = 0; $i < count($str); $i ++)
                $rep->AmountCol($i + 3, $i + 4, $str[$i], $dec);
            $rep->NewLine(1, 2);
            if (! $summaryOnly) {
                $res = $this->analysis_model->analysis_invoices($myrow['supplier_id'], $to, $show_all);
                if (count($res) < 1)
                    continue;
                $rep->Line($rep->row + 4);
                //while ($trans = db_fetch($res)) {
//                 bug($res);die;
                foreach ($res AS $trans){
                    $rep->NewLine(1, 2);
                    $rep->TextCol(0, 1, tran_name($trans['type']), - 2);
                    $rep->TextCol(1, 2, $trans['reference'], - 2);
                    $rep->TextCol(2, 3, sql2date($trans['tran_date']), - 2);

//                     foreach ($trans as $i => $value)
//                         $trans[$i] *= $rate;

                    $str = array(
                        $trans["Balance"] - $trans["Due"],
                        $trans["Due"] - $trans["Overdue1"],
                        $trans["Overdue1"] - $trans["Overdue2"],
                        $trans["Overdue2"],
                        $trans["Balance"]
                    );
                    for ($i = 0; $i < count($str); $i ++)
                        $rep->AmountCol($i + 3, $i + 4, $str[$i], $dec);
                }
                $rep->Line($rep->row - 8);
                $rep->NewLine(2);
            }
        }
// die('aaa');
        if ($summaryOnly) {
            $rep->Line($rep->row + 4);
            $rep->NewLine();
        }
        $rep->fontSize += 2;
        $rep->TextCol(0, 3, _('Grand Total'));
        $rep->fontSize -= 2;
        for ($i = 0; $i < count($total); $i ++) {
            $rep->AmountCol($i + 3, $i + 4, $total[$i], $dec);
            if ($graphics && $i < count($total) - 1) {
                $pg->y[$i] = abs($total[$i]);
            }
        }
        $rep->Line($rep->row - 8);
        $rep->NewLine();
        if ($graphics) {
            global $decseps, $graph_skin;
            $pg->x = array(
                _('Current'),
                $nowdue,
                $pastdue1,
                $pastdue2
            );
            $pg->title = $rep->title;
            $pg->axis_x = _("Days");
            $pg->axis_y = _("Amount");
            $pg->graphic_1 = $to;
            $pg->type = $graphics;
            $pg->skin = $graph_skin;
            $pg->built_in = false;
            $pg->latin_notation = ($decseps[$_SESSION["wa_current_user"]->prefs->dec_sep()] != ".");
            $filename = company_path() . "/pdf_files/" . uniqid("") . ".png";
            $pg->display($filename, true);
            $w = $pg->width / 1.5;
            $h = $pg->height / 1.5;
            $x = ($rep->pageWidth - $w) / 2;
            $rep->NewLine(2);
            if ($rep->row - $h < $rep->bottomMargin)
                $rep->NewPage();
            $rep->AddImage($filename, $x, $rep->row - $h, $w, $h);
        }
        $rep->End();
    }
}